<project
	name="common"
	basedir="."
	default="help">
	
	<dirname property="ant.dir.common" file="${ant.file.common}"/>
	
	<property file="${basedir}/build.properties"/>
	<property file="${ant.dir.common}/build.properties"/>
	<import file="${ant.dir.common}/common-ivy.xml"/>
	
	<property environment="env"/>
	
	<target name="help">
		<java classname="org.apache.tools.ant.Main">
			<arg value="-projecthelp" />
		</java>
	</target>
	
	<macrodef name="compile">
		<attribute name="conf"/>
		<attribute name="version" default="${build.version}"/>
		<element name="additional-classpath" optional="yes"/>
		<sequential>
			<mkdir dir="./bin/@{conf}/java"/>
			<mkdir dir="./lib/@{conf}/java/"/><!-- if module conf has no ivy dependencies -->


			<echo>Compiling @{conf} with Java @{version}</echo>
			<!-- Compile classes -->
			<javac destdir="./bin/@{conf}/java" debug="true" source="@{version}" target="@{version}" compiler="javac@{version}" includeantruntime="false">
				<src path="./src/@{conf}/java"/>
				<classpath>
					<fileset dir="./lib/@{conf}/java" includes="*.jar"/>
					<path location="${build.classpath}"/>
					<additional-classpath/>
				</classpath>
			</javac>
			
			<!-- Copy any other resources -->
			<copy todir="./bin/@{conf}/java">
				<fileset dir="./src/@{conf}/java" excludes="**/*.java"/>
			</copy>
		</sequential>
	</macrodef>
	
	<macrodef name="create-jar">
		<attribute name="conf" />
		<attribute name="organisation" default="${ivy.organisation}" />
		<attribute name="module" default="${ivy.module}" />
		<attribute name="version" default="${git.describe.long}"/>
		<element name="additional-includes" optional="yes"/>
		<sequential>
			<fail message="organisation not set">
				<condition>
					<length string="@{organisation}" trim="true" length="0" />
				</condition>
			</fail>
		
			<fail message="module not set">
				<condition>
					<length string="@{module}" trim="true" length="0" />
				</condition>
			</fail>
		
			<fail message="version not set">
				<condition>
					<length string="@{version}" trim="true" length="0" />
				</condition>
			</fail>
			<mkdir dir="./bin/@{conf}/jar" />
			<jar jarfile="./bin/@{conf}/jar/@{organisation}.@{module}.jar">
				<manifest>
					<section name="@{organisation}/@{module}">
						<attribute name="Class-Path" value="." />
						<attribute name="Specification-Title" value="${readme.title}" />
						<attribute name="Specification-Version" value="${git.tag}" />
						<attribute name="Specification-Vendor" value="Martin Pöhlmann" />
						<attribute name="Implementation-Title" value="@{organisation}.@{module}" />
						<attribute name="Implementation-Version" value="${git.describe.long}" />
						<attribute name="Implementation-Vendor" value="Martin Pöhlmann" />
					</section>
				</manifest>
				<fileset dir="./bin/@{conf}/java" includes="**/*" />
				<additional-includes/>
			</jar>
		</sequential>
	</macrodef>
	
	<target name="clean-lib" description="Clean the project libraries directory (dependencies)">
        <delete includeemptydirs="true" dir="./lib"/>
    </target>

	<target name="clean-build" description="Clean build output">
		<delete dir="./bin" />
	</target>
	
	<extension-point name="--before-clean"/>
	<extension-point name="--on-clean"/>
	<extension-point name="--after-clean"/>
	<target name="clean" depends="--before-clean,clean-lib,clean-build" description="Clean all">
		<antcall target="--on-clean"/>
		<antcall target="--after-clean"/>
	</target>

    <target name="deps-main" description="Retrieve main dependencies with ivy">
    	<ivy-retrieve conf="main"/>
    </target>
    
    <target name="deps-test" description="Retrieve main dependencies with ivy">
    	<ivy-retrieve conf="test"/>
    </target>
    
    <extension-point name="--before-deps"/>
	<extension-point name="--on-deps"/>
	<extension-point name="--after-deps"/>
    <target name="deps" depends="--before-deps,deps-main, deps-test, --on-deps" description="Retrieve all dependencies with ivy">
    	<antcall target="--on-deps"/>
    </target>
    
    <extension-point name="--before-compile-main"/>
	<extension-point name="--on-compile-main"/>
	<extension-point name="--after-compile-main"/>
	<target name="compile-main" depends="--before-compile-main,deps-main" description="Compile classes">
		<antcall target="--on-deps"/>
		<compile conf="main">
			<additional-classpath>
				<path location="${build.classpath.main}"/>
			</additional-classpath>			
		</compile>
		<antcall target="--on-deps"/>
	</target>

    <extension-point name="--before-compile-test"/>
	<extension-point name="--on-compile-test"/>
	<extension-point name="--after-compile-test"/>
	<target name="compile-test" depends="--before-compile-test,compile-main,deps-test" description="Compile classes">
		<antcall target="--on-compile-test"/>
		<compile conf="test">
			<additional-classpath>
				<path location="./bin/main/java"/>
				<path location="${build.classpath.main}"/>
				<path location="${build.classpath.test}"/>
			</additional-classpath>
		</compile>
		<antcall target="--on-compile-test"/>
	</target>
	
	<extension-point name="--before-build"/>
	<extension-point name="--on-build"/>
	<extension-point name="--after-build"/>
	<target name="build" depends="--before-build,compile-main">
		<antcall target="--on-build"/>
		<antcall target="--after-build"/>
	</target>
	
	<extension-point name="--before-test"/>
	<extension-point name="--on-test"/>
	<extension-point name="--after-test"/>
	<target name="test" depends="--before-test,compile-test">
	
		<mkdir dir="./bin/test/result"/>
		
		<antcall target="--on-test"/>
		
		<junit fork="no" haltonfailure="true">
			<classpath>
				<fileset dir="./lib/test/java" includes="*.jar" />
				<path location="./bin/test/java" />
				<path location="./bin/main/java" />
				<path location="${build.classpath}"/>
				<path location="${build.classpath.main}"/>
				<path location="${build.classpath.test}"/>
			</classpath>
		    <formatter type="plain" usefile="false" /> <!-- to screen -->
		    <formatter type="plain" /> <!-- to file -->
			<batchtest todir="./bin/test/result">
				<!-- Can be used as soon ant 1.9.3 is available on travis -->
				<!--fileset dir="./src/test/java" skipNonTests="true"/-->
				<fileset dir="./src/test/java" includes="**/*Test.java"/>
			</batchtest>
		</junit>
		
		<antcall target="--after-test"/>
	</target>
	
	<target name="git-info" >
		<exec executable="git" outputproperty="git.branch">
			<arg value="name-rev"/>
			<arg value="--name-only"/>
			<arg value="HEAD"/>
		</exec>
		<exec executable="git" outputproperty="git.revision">
			<arg value="rev-parse"/>
			<arg value="--short"/>
			<arg value="HEAD"/>
		</exec>
		<exec executable="git" outputproperty="git.count">
			<arg value="rev-list"/>
			<arg value="--count"/>
			<arg value="--all"/>
		</exec>
		<exec executable="git" outputproperty="git.tag">
			<arg value="describe"/>
			<arg value="--always"/>
			<arg value="--abbrev=0"/>
		</exec>
		<exec executable="git" outputproperty="git.describe">
			<arg value="describe"/>
			<arg value="--always"/>
		</exec>
		<exec executable="git" outputproperty="git.describe.long">
			<arg value="describe"/>
			<arg value="--always"/>
			<arg value="--long"/>
		</exec>
	</target>
	
	<target name="project-info" >

		<loadfile srcfile="./README.md" property="readme.title">
			<filterchain>
				<headfilter lines="1"/>
				<tokenfilter>
					<linetokenizer/>
					<replaceregex pattern="([^\[]+).*" replace="\1"/>
					<trim/>
				</tokenfilter>
			</filterchain>
		</loadfile>
		<loadfile srcfile="./README.md" property="readme.description">
			<filterchain>
				<tokenfilter>
					<linetokenizer/>
					<trim/>
					<ignoreblank/>
				</tokenfilter>
				<headfilter lines="1" skip="2"/>
			</filterchain>
		</loadfile>
	</target>
	
	<extension-point name="--before-jar"/>
	<extension-point name="--on-jar"/>
	<extension-point name="--after-jar"/>
	<target name="jar" description="Create Jars" depends="--before-jar,build,git-info,project-info">

		<antcall target="--on-jar"/>
		
		<create-jar conf="main"/>
		
		<antcall target="--after-jar"/>

	</target>
	
	<target name="publish" description="Publish Jars" depends="jar" if="env.CI">

		<exec executable="./.infra/build/bash/publish" failonerror="true">
			<arg value="${build.jar}"/>
		</exec>

	</target>

</project>
